{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GUIDE","text":"Swiper Example Learn More Learn More Getting Started Hardware Guide Software Guide Getting Started Hardware Guide Software Guide Contact Us <p>Email: info@galaxea.ai</p>"},{"location":"Guide/A1/Getting_Started/","title":"Getting Started","text":"<p>Congratulations on becoming the proud owner of a Galaxea Robot! We are thrilled to extend a warm welcome to the Galaxea Developer Community. This specially curated guide is designed to introduce beginners to the unique appeal and impressive functionalities of Galaxea Robot. Our goal is to help you quickly get started with us and empower you to explore the full range of possibilities that await you.</p>"},{"location":"Guide/A1/Getting_Started/#getting-started","title":"Getting Started","text":"<p>In this series of step-by-step Galaxea A1 Getting Started tutorials, we will not only lay a solid foundation for using Galaxea A1 but also guide you through the mechanics and performance of each component. Together, we will explore and perform a series of exciting demonstrations to unlock Galaxea A1's amazing advanced features.</p>"},{"location":"Guide/A1/Getting_Started/#before-you-begin","title":"Before You Begin","text":"<p>In this first tutorial, you will learn how to turn on and operate this new product , beginning your journey of interacting with Galaxea A1 Robot Arm.</p>"},{"location":"Guide/A1/Getting_Started/#safety","title":"Safety","text":"<p>To ensure safe use, it is important to remember that Galaxea A1 can cause potential injury if operated improperly. Therefore, we strongly recommend that every user carefully read and follow the instructions in the Safety Guide before operating the robot for the first time to ensure a safe and efficient operation process.</p>"},{"location":"Guide/A1/Getting_Started/#unboxing","title":"Unboxing","text":"<p>Upon opening the package, you will find the robot arm as a fully assembled unit. This means that the arm structure, including all its links and joints, comes pre-assembled and ready for installation. Here\u2019s what you can expect inside the box: </p> Item Quantity Notes Pre-assembled Robot Arm 1 The arm is constructed with all its components integrated, ensuring a straightforward setup process. Power Supply Unit  1 Supplies the electrical power required for the robot arm's operation. Emergency Stop Button 1 Used for immediate power interruption during emergencies Power Cable 1 Used to connect the power supply unit to the robot arm. USB Cable 1 Used to connect the robot arm controller to a computer with a USB 2.0 port.  Mounting Base Plate 1 A flat plate for mounting the robot arm to a stable surface. G-Clip 2 Grating fasteners, used to secure the base plate to the worktable or surface. Mouting Plate Scew M6 4 Used to attach the base plate to the installation surface using the G-clips."},{"location":"Guide/A1/Getting_Started/#installing","title":"Installing","text":"<p>The installation process of Galaxea A1 includes securing the arm to the mounting base to ensure its stability and operating accuracy. The design of the mounting holes allows the arm to be securely mounted on a variety of platforms, providing flexible mounting options.</p> <p>Please select the appropriate installation platform and fixing method according to the operating environment and usage requirements of the arm to ensure its stability and safety during operation.</p>"},{"location":"Guide/A1/Getting_Started/#powering-up","title":"Powering Up","text":"<p>To power up, with the provided power adapter and cable, plug one end of the power adapter cable into the power port on the base of the robot arm, and connect the other end to the power source, ensuring the voltage is 48V.</p>"},{"location":"Guide/A1/Getting_Started/#powering-off","title":"Powering Off","text":"<p>Once the robot arm and control system have completely stopped, you can just unplug the power cable to turn off Galaxea A1.</p> <p>In the current version of Galaxea A1, the motor does not have a brake, so cutting off the power may cause the robotic arm to drop suddenly. We will continue to improve the product to address this issue.</p>"},{"location":"Guide/A1/Getting_Started/#emergency-stop","title":"Emergency Stop","text":"<p>The power supply unit of the robot arm includes an emergency stop switch (E-stop) for immediate power interruption during emergencies. </p> <p>Pressing the E-stop button will instantly disconnect power to the robot arm, ensuring operator safety and preventing damage to the equipment.</p>"},{"location":"Guide/A1/Getting_Started/#getting-help","title":"Getting Help","text":"<p>Should you encounter any issues, need immediate assistance, or find yourself seeking direct dialogue with Galaxea AI's engineering team, do not hesitate to contact us at products@galaxea.ai.</p>"},{"location":"Guide/A1/Getting_Started/#next-step","title":"Next Step","text":"<p>Our quickstart journey has come to an end. To deepen your mastery of A1 Robot Arm, we strongly recommend exploring the following chapters in Galaxea A1 Hardware Guide and Galaxea A1 Software Guide. These resources offer a wealth of additional information and practical examples, guiding you through the intricacies of programming with confidence and ease.</p>"},{"location":"Guide/A1/Hardware_Guide/","title":"Galaxea A1 Hardware Guide","text":"<p>This manual provides engineering data and user guidance for working with Galaxea A1 hardware.</p>"},{"location":"Guide/A1/Hardware_Guide/#safety-guide","title":"Safety Guide","text":"<p>Galaxea robots are potentially dangerous machines with safety hazards. If improperly used, they can cause injury.</p> <ul> <li>All users must carefully read the following safety information before using the robot.</li> <li>Anyone near the robot who has not read this safety information must be closely supervised at all times and made aware that the robot could be dangerous.</li> <li>Only use the robot after inspecting the surrounding environment for potential hazards.</li> </ul> <p>Please refer to the Safety Guide for more information.</p>"},{"location":"Guide/A1/Hardware_Guide/#disclaimer","title":"Disclaimer","text":"<p> Galaxea A1 is intended for research applications by users experienced in operating and programming research robots. This product is not designed for general consumer use in the home and does not have the necessary certifications for such purposes. </p>"},{"location":"Guide/A1/Hardware_Guide/#technical-specification","title":"Technical Specification","text":""},{"location":"Guide/A1/Hardware_Guide/#electric-parameters","title":"Electric Parameters","text":"<p>The electrical parameters of Galaxea A1 include its voltage, current, and communication interface. Its design ensures stable and reliable performance, even in high payload and dynamic applications.</p> Parameters Value Nominal Voltage 48 V Rated Current 30 A Maximum Current 50 A Communication Interface USB 2.0 Port"},{"location":"Guide/A1/Hardware_Guide/#performance-parameters","title":"Performance Parameters","text":"<p>The performance parameters highlight Galaxea A1's key specifications, such as weight, payload capacity, arm reach, and speed, reflecting its superior performance in highly dynamic operations.</p> Performance Value Weight 6 kg Rated Payload 2 kg Maximum Payload 5 kg Reach 700 mm Maximum End-Effector Linear Velocity 10 m/s Maximum End-Effector Acceleration 10 m/s\u00b2 Degree of Freedom 6 Repeatability 1 mm"},{"location":"Guide/A1/Hardware_Guide/#hardware-structure","title":"Hardware Structure","text":""},{"location":"Guide/A1/Hardware_Guide/#robot-structure","title":"Robot Structure","text":""},{"location":"Guide/A1/Hardware_Guide/#joint","title":"Joint","text":"<p>The joint performance parameters detail the operating range, rated torque, and peak torque of the six joints, showcasing the robot's flexibility and power across a variety of operations. </p> Joint Range Rated Torque Joint 1 [-165\u00b0, 165\u00b0] 20 Nm Joint 2 [0\u00b0, 180\u00b0] 20 Nm Joint 3 [0\u00b0, 190\u00b0] 9 Nm Joint 4 [-165\u00b0, 165\u00b0] 3 Nm Joint 5 [-95\u00b0, 95\u00b0] 3 Nm Joint 6 [-105\u00b0, 105\u00b0] 3 Nm <p></p> <ul> <li>View 1: Shows the working radius and rotation angle of Joint 1, with a rotation radius of 715 mm and a maximum rotation angle of 330 degrees.</li> <li>View 2: Displays the rotation ranges for Joint 2 and Joint 3, with a maximum rotation angle of 180 degrees for Joint 2 and 190 degrees for Joint 3.</li> <li>View 3: Illustrates the rotation angles of Joints 4, 5, and 6, as well as the end position of the robot arm. The maximum rotation angle for Joint 4 and 6 is 330 degrees, while Joint 5 has a maximum rotation angle of 190 degrees.</li> </ul>"},{"location":"Guide/A1/Hardware_Guide/#link","title":"Link","text":"<p>Galaxea A1 consists of two main links made from Acrylonitrile Butadiene Styrene (ABS), which is lightweight, rigid and durable. Each joint is equipped with planetary gear motors, enabling independent variable-speed operation with high precision and torque. This design allows the arm to maneuver in any direction commanded by the controller. In the current version, the motor does not have a brake, so cutting off the power may cause the robot arm to drop suddenly. We will continue to improve the product to address this issue. </p> <p>The arm is designed to have:</p> Item Notes Length Deployed 775 mm  Folded 449 mm  Height Deployed 237 mm  Folded 277 mm  Width 128 mm"},{"location":"Guide/A1/Hardware_Guide/#base","title":"Base","text":"<p>Galaxea A1 features two ports on the rear of the base for development and charging.</p> Item Notes Power Port Rated voltage 48 V USB Port USB 2.0 Mounting Holes Four M6 threads with a diameter of 6.3 mm Size 100 mm x 100 mm Maximum End-Effector Linear Velocity 10 m/s"},{"location":"Guide/A1/Hardware_Guide/#end-effector","title":"End-Effector","text":""},{"location":"Guide/A1/Hardware_Guide/#galaxea-g1","title":"Galaxea G1","text":"<p>Galaxea G1 is composed of one motor, two clips, and one specially designed joint module. </p> <p>Note: No gripper is included with the product. Contact us and purchase end-effectors or customized tools if needed. </p> Feature Value Length 149 mm Length of Fingers 77 mm  Diameter of Motor 60 mm Gripper Operating Range 0~60 mm Gripper Operating Range 100 N <p></p> <p>Equipped with the end-effector, Galaxea G1, should have:</p> Item Notes Length Deployed 918 mm  Folded 545 mm  Height Deployed 237 mm  Folded 277 mm  Width 128 mm Degree of Freedom 7 Maximum Payload 5 kg Weight 6 kg"},{"location":"Guide/A1/Hardware_Guide/#attaching","title":"Attaching","text":"<p>Here it shows how to attach gripper to Galaxea A1. To remove them, simply reverse these steps.</p> <ol> <li>Alignment Check: Ensure that the four protruding points on the gripper align perfectly with the corresponding recessed points on the robot arm's end-effector mount. Proper alignment ensures the gripper is correctly positioned and centered.</li> <li>Initial Placement: Carefully place the gripper onto the robot arm's end effector mount, ensuring that the protrusions fit snugly into the recesses. This step is crucial for achieving the correct orientation and balance.</li> <li>Screw Fixation: Once aligned, secure the gripper to the robot arm using the three screws provided. These screws should be placed around the outer circle of the mounting area, as shown in the figure. Tighten the screws evenly to prevent any skewing or misalignment.</li> <li>Final Check: After tightening the screws, double-check the alignment and stability of the gripper. It should be firmly attached and not wobble or move independently of the robot arm.</li> <li>Testing: Before using the robot arm, perform a test run to ensure that the gripper moves smoothly and holds objects securely without any slippage or unexpected movement.</li> </ol>"},{"location":"Guide/A1/Hardware_Guide/#inspire-robots-rh56-series-dexterous-hand","title":"Inspire-Robots RH56 Series Dexterous Hand","text":"<p>The dexterous hand boasts significant gripping strength and moderate speed, making it suitable for grasping and manipulating tasks in robotics or prosthetic applications. Its combination of power and control allows for effective handling of various objects, similar to the versatility of a human hand, thereby enhancing the functionality of robots or prostheses in performing complex tasks.</p> Feature Value Degrees of Freedom 6 Number of Joints 12 Weight 540 g Repeatability \u00b10.20 mm Max. Finger Grip Force 10 N <p></p>"},{"location":"Guide/A1/Hardware_Guide/#next-step","title":"Next Step","text":"<p>This concludes the hardware guide for Galaxea A1. For further details, please refer to Galaxea A1 Software Guide.</p>"},{"location":"Guide/A1/Software_Guide/","title":"Software Guide","text":"<p>We developed an efficient driver for converting serial signals through the slave computer, which has been released as a ROS (Robot Operating System) topic. This driver not only enables control of the slave computer but also retrieves feedback information and error codes from the device, facilitating two-way communication and real-time control. The tutorials will guide you on how to use this program to develop and operate Galaxea A1.</p>"},{"location":"Guide/A1/Software_Guide/#software-dependency","title":"Software Dependency","text":"<ol> <li>Ubuntu 20.04 LTS</li> <li>ROS Noetic</li> </ol>"},{"location":"Guide/A1/Software_Guide/#installation","title":"Installation","text":"<p>This SDK does not require recompilation. Please refer to the Developing and Operating Tutorials for direct usage instructions.</p>"},{"location":"Guide/A1/Software_Guide/#first-move","title":"First Move","text":"<p><pre><code>cd release/install\nsource setup.bash\nroslaunch mobiman eeTrackerdemo.launch\n</code></pre> <pre><code>rostopic pub /a1_ee_target geometry_msgs/PoseStamped \"{\nheader: {\nseq: 0,\nstamp: {secs: 0, nsecs: 0},\nframe_id: 'world'\n},\npose: {\nposition: {x: 0.08, y: 0.0, z: 0.5},\norientation: {x: 0.5, y: 0.5, z: 0.5, w: 0.5}\n}\n}\"\n</code></pre></p>"},{"location":"Guide/A1/Software_Guide/#developing-and-operating-tutorials","title":"Developing and Operating Tutorials","text":""},{"location":"Guide/A1/Software_Guide/#a1-driver-kit","title":"A1 Driver Kit","text":"<ol> <li> <p>For the first use, after confirming the power supply and USB connection, run the following command to modify the read and write permissions of the serial port files: <pre><code>sudo chmod 777 /dev/ttyACM0\n</code></pre></p> </li> <li> <p>After confirming the modification, you can initialize the SDK: <pre><code>cd a1_driver_sdk/install\nsource setup.bash\nroslaunch signal_arm single_arm_node.launch\n</code></pre></p> </li> </ol> <p>The interface section describes the various control and status feedback interfaces for A1 robot arm, helping users understand how to communicate with and control the arm through the ROS package.</p>"},{"location":"Guide/A1/Software_Guide/#driver-interface","title":"Driver Interface","text":"<p>The interface is a ROS package designed for manipulator control and status feedback. This package defines several topics for publishing and subscribing to the robot arm\u2019s status, control commands, and associated error codes. Below are detailed descriptions of each topic and its related message types:</p> Topic Name  Description  Message Type /joint_states Robot arm joint status feedback sensor_msgs/JointState /arm_status Robot arm motor status feedback signal_arm/status_stamped /arm_joint_command Robot arm joint control interface signal_arm/arm_control Topic Name Field Description /joint_states Header Standard header name Name of each arm joint position Position of each arm joint velocity Velocity of each arm joint effort Torque of each arm joint /arm_status header Standard header status.name Name of each status status.motor_errors Errors of each status /arm_joint_command header Standard header p_des Position command of robot arm v_des Velocity command of robot arm t_ff Torque command of robot arm kp Proportion coefficient of position kd Differential coefficient of position mode Control mode"},{"location":"Guide/A1/Software_Guide/#diagnostic-trouble-code","title":"Diagnostic Trouble Code","text":"<p>DTC is used to feedback the error information of the MCU and the drive,  and can be used to view the real-time status of each motor and the running status of the drive. The following is a detailed description of each fault code and its corresponding status.</p> DTC Status 0 Disabled 1 Disabled 2 Motor Disconnected 3 Position Jump 4 Continuous High Current 5 Excessive Torque 6 ECU -&gt; MCU Timeout 7 Position Limit Exceeded 8 Speed Limit Exceeded 9 Torque Limit Exceeded 10 Overpressure 11 Low pressure 12 Overcurrent 13 MOS Overtemperature 14 Motor Winding Overtemperature 15 Communication loss 16 Overload 17 Serial Connection Disconnected (No Device File) 18 Device File Connected, No Messages 19 Serial Read/Write Failure 20 Feedback Reception Overflow"},{"location":"Guide/A1/Software_Guide/#joint-and-end-effector-movement-control","title":"Joint and End-Effector Movement Control","text":"<p>We provide joint and end-effector movement control interfaces for Galaxea A1, enabling efficient control through the ROS (Robot Operating System) framework. Before performing end-effector or joint movement, you must first activate the <code>signal_arm</code> interface; detailed operation instructions can be found in the  <code>signal_arm</code> documentation. This project includes several primary functions:</p> <ul> <li> <p>End-Effector Pose Movement: Allows users to control the position and orientation of the Galaxea A1's end-effector by publishing target pose messages. This function is suitable for applications requiring precise positioning.</p> </li> <li> <p>End-Effector Trajectory Movement: Facilitates the movement of Galaxea A1's end-effector along a specified trajectory by publishing a series of pose messages. This function is ideal for complex path planning and execution.</p> </li> <li> <p>Joint Angle Movement: Provides a joint-level control interface where users can set the target positions for each individual joint, enabling coordinated whole-arm movements.</p> </li> </ul>"},{"location":"Guide/A1/Software_Guide/#end-effector-pose-movement","title":"End-Effector Pose Movement","text":"<ol> <li>First, initiate the end-effector pose movement script. This will launch an RViz visualization for Galaxea A1, with the default joint positions set to zero. <pre><code>cd release/install\nsource setup.bash\nroslaunch mobiman eeTrackerdemo.launch\n</code></pre></li> <li>In the file eeTrackerdemo.launch\uff1a <pre><code>&lt;param name=\"joint_states_topic\" value=\"/joint_states\" /&gt; # the topic /joint_states  represents the channel for acquiring simulated values, specifically the states of the robot's joints, within a simulation environment.\n&lt;param name=\"joint_command\" value=\"/a1_robot_right/arm_joint_command\" /&gt; # the topic /a1_robot_right/arm_joint_command topic represents the channel for issuing commands to the motors.\n</code></pre></li> <li>Publish messages to the end-effector movement topic, specifically named <code>/a1_ee_target</code>. This operation is non-blocking, allowing for continuous message sending and enabling seamless movement of the robot arm's end-effector. However, it's critical that the target endpoint is not too far from the current position of the end-effector to avoid overstraining the mechanics or risking a collision. <pre><code>rostopic pub /a1_ee_target geometry_msgs/PoseStamped \"{\nheader: {\nseq: 0,\nstamp: {secs: 0, nsecs: 0},\nframe_id: 'world'\n},\npose: {\nposition: {x: 0.08, y: 0.0, z: 0.5},\norientation: {x: 0.5, y: 0.5, z: 0.5, w: 0.5}\n}\n}\"\n</code></pre> <pre><code>#!/usr/bin/env python\nimport rospy\nfrom geometry_msgs.msg import PoseStamped\ndef publish_pose():\nrospy.init_node('pose_stamped_publisher', anonymous=True)\npose_pub = rospy.Publisher('/a1_ee_target', PoseStamped, queue_size=10)\n# Create message with type PoseStamped\npose_msg = PoseStamped()\npose_msg.header.seq = 0\npose_msg.header.stamp = rospy.Time.now()\npose_msg.header.frame_id = 'world'\npose_msg.pose.position.x = 0.\npose_msg.pose.position.y = 0.\npose_msg.pose.position.z = 0.\npose_msg.pose.orientation.x = 0.\npose_msg.pose.orientation.y = 0.\npose_msg.pose.orientation.z = 0.\npose_msg.pose.orientation.w = 0.\n# Wait for subscribers to connect\nrospy.sleep(1)\n# Pulish message\npose_pub.publish(pose_msg)\nrospy.loginfo(\"Published PoseStamped message to /a1_ee_target\")\nif __name__ == '__main__':\ntry:\npublish_pose()\nexcept rospy.ROSInterruptException:\npass\n</code></pre></li> <li>Usage Example:</li> </ol>    Your browser does not support the video tag."},{"location":"Guide/A1/Software_Guide/#end-effector-trajectory-movement","title":"End-Effector Trajectory Movement","text":"<ol> <li>Firstly, initiate the end-effector trajectory movement script. This will launch an RViz visualization for Galaxea A1, with the default joint positions set to zero. <pre><code>cd release/install\nsource setup.bash\nroslaunch mobiman eeTrajTrackerdemo.launch\n</code></pre></li> <li>In the file eeTrajTrackerdemo.launch : <pre><code>&lt;param name=\"joint_states_topic\" value=\"/joint_states\" /&gt; # the /joint_states topic represents the channel for acquiring simulated values, specifically the states of the robot's joints, within a simulation environment.\n&lt;param name=\"joint_command\" value=\"/a1_robot_right/arm_joint_command\" /&gt; #the /a1_robot_right/arm_joint_command topic represents the channel for issuing commands to the motors.\n</code></pre></li> <li>PPublish messages to specify a trajectory for the end-effector movement on the   <code>/arm_target_trajectory</code> topic. This operation is non-blocking, allowing for continuous publishing. Ensure that the trajectory does not deviate significantly from the current end-effector position. It is recommended to wait until the current trajectory is completed before sending the next one to avoid inaccuracies in tracking the desired path. <pre><code>#include &lt;ros/ros.h&gt;\n#include &lt;geometry_msgs/PoseArray.h&gt;\n\ngeometry_msgs::Pose createPose(double x, double y, double z, double w, double ox, double oy, double oz) {\n    geometry_msgs::Pose pose;\n    pose.position.x = x;\n    pose.position.y = y;\n    pose.position.z = z;\n    pose.orientation.w = w;\n    pose.orientation.x = ox;\n    pose.orientation.y = oy;\n    pose.orientation.z = oz;\n    return pose;\n}\n\nint main(int argc, char** argv) {\n    ros::init(argc, argv, \"pose_array_publisher\");\n    ros::NodeHandle nh;\n    ros::Publisher pose_pub = nh.advertise&lt;geometry_msgs::PoseArray&gt;(\"/arm_target_trajectory\", 10);\n\n    // Wait for subscribers to connect\n    ros::Rate wait_rate(10);\n    while (pose_pub.getNumSubscribers() == 0) {\n        wait_rate.sleep();\n    }\n\n    geometry_msgs::PoseArray poseArrayMsg;\n\n    poseArrayMsg.poses.push_back(createPose(0.08, 0.0, 0.3, 0.5, 0.5, 0.5, 0.5));\n    poseArrayMsg.poses.push_back(createPose(0.08, 0.0, 0.4, 0.5, 0.5, 0.5, 0.5));\n    poseArrayMsg.poses.push_back(createPose(0.08, 0.0, 0.54, 0.5, 0.5, 0.5, 0.5));\n\n    pose_pub.publish(poseArrayMsg);\n    ROS_INFO(\"Published PoseArray with 3 poses\");\n\n    return 0;\n}\n</code></pre></li> <li>Usage Example:</li> </ol>    Your browser does not support the video tag."},{"location":"Guide/A1/Software_Guide/#end-effector-pose-movement-interface","title":"End-Effector Pose Movement Interface","text":"Topic Name Description Message Type /a1_ee_target Target pose of end arm joint Geometry_msgs::PoseStamped Topic Name Field Description /a1_ee_target header Standard Header pose.position.x Shift in x direction pose.position.y Shift in y direction pose.position.z Shift in z direction pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/A1/Software_Guide/#joint-angle-movement","title":"Joint Angle Movement","text":"<ol> <li> <p>Firstly, initiate the joint angle movement script. This will launch an RViz visualization for Galaxea A1, with the default joint positions set to zero. <pre><code>cd release/install\nsource setup.bash\nroslaunch mobiman jointTrackerdemo.launch\n</code></pre></p> </li> <li> <p>In the file jointTrackerdemo.launch : <pre><code>&lt;param name=\"joint_states_sub_topic\" value=\"/joint_states\" /&gt; # the /joint_states topic represents the channel for acquiring simulated values, specifically the states of the robot's joints, within a simulation environment.\n&lt;param name=\"joint_command\" value=\"/a1_robot_right/arm_joint_command\" /&gt; #the /a1_robot_right/arm_joint_command topic represents the channel for issuing commands to the motors.\n</code></pre> Publish messages for joint movement on the  <code>/arm_joint_target_position</code> topic. This operation is non-blocking, allowing for continuous publishing and enabling uninterrupted movement of the robot arm's joints. <pre><code>import rospy\nfrom sensor_msgs.msg import JointState\n\ndef publish_joint_state():\n    rospy.init_node('joint_state_publisher', anonymous=True)\n    pub = rospy.Publisher('/arm_joint_target_position', JointState, queue_size=10)\n    rate = rospy.Rate(10) # 10 Hz\n    joint_state = JointState()\n    joint_state.header.seq = 0\n    joint_state.header.stamp = rospy.Time.now()\n    joint_state.header.frame_id = 'world'\n    joint_state.name = ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6']\n    joint_state.velocity = []\n    joint_state.effort = []\n    # Initialize positions to zeros\n    joint_state.position = [0, 0, 0, 0, 0, 0]\n    steps = 100 # Number of steps\n\n #to reach the target position\n    target_position = [0.5, 0, 0, 0, 0, 0]\n    step_increment = [(target - current) / steps for target, current in zip(target_position, joint_state.position)]\n    for step in range(steps):\n        joint_state.header.stamp = rospy.Time.now() # Update the timestamp\n        joint_state.position = [current + increment for current, increment in zip(joint_state.position, step_increment)]\n        pub.publish(joint_state)\n        rate.sleep()\n    rospy.loginfo(\"Published JointState message to /arm_joint_target_position\")\n\nif __name__ == '__main__':\n    try:\n        publish_joint_state()\n    except rospy.ROSInterruptException:\n        pass\n</code></pre></p> </li> </ol>"},{"location":"Guide/A1/Software_Guide/#joint-position-movement-interface","title":"Joint Position Movement Interface","text":"<p>The <code>/joint_move</code> is a ROS package for single-joint control of Galaxea A1. This package allows you to specify the movement of each joint from its current position to a target position, with configurable maximum speed and acceleration. If these parameters are not specified, default values will be used. The default maximum speed is 20 rad/s, and the default maximum acceleration is 20 rad/s\u00b2. The topic names and fields of the movement interface are detailed in the following table.</p> Topic Name Description Message Type /arm_joint_target_position Target position of each joint Sensor_msgs/JointState Topic Name Field Description /arm_joint_target_position header Standard Header name Name of each joint position Target position of each joint velocity Maximum velocity of each joint"},{"location":"Guide/R1/GettingStarted_Before/","title":"Before You Begin","text":"<p>Congratulations on becoming the proud owner of a Galaxea Robot! We are thrilled to extend a warm welcome to the Galaxea Developer Community. This specially curated guide is designed to introduce beginners to the unique appeal and impressive functionalities of Galaxea Robot. Our goal is to help you quickly get started with us and empower you to explore the full range of possibilities that await you.</p>"},{"location":"Guide/R1/GettingStarted_Before/#before-you-begin","title":"Before You Begin","text":"<p>In this first tutorial, you will learn how to power on and operate this new product, beginning your journey of interacting with Galaxea R1.</p>"},{"location":"Guide/R1/GettingStarted_Before/#safety","title":"Safety","text":"<p>Galaxea R1 has the potential to cause harm if not properly used. We recommend that all users review the Safety Guide before operating the robot.</p>"},{"location":"Guide/R1/GettingStarted_Before/#installing","title":"Installing","text":"<p>For detailed instructions on how to install each component of Galaxea R1, please refer to the Connecting and Installing section. These tutorials provide step-by-step guidance to ensure proper assembly and setup.</p>"},{"location":"Guide/R1/GettingStarted_Before/#turning-on","title":"Turning On","text":"<p>To turn on Galaxea R1, please press the boat-shaped button on the side of the chassis. </p>"},{"location":"Guide/R1/GettingStarted_Before/#charging","title":"Charging","text":"<p>To charge Galaxea R1, please use the provided power cable and insert it into the 48V power supply port located at the bottom of the rear of the chassis. </p>"},{"location":"Guide/R1/GettingStarted_Before/#shutting-down","title":"Shutting Down","text":"<p>Galaxea R1 can be turned off by simply switching off the button on the left side of the chassis. </p>"},{"location":"Guide/R1/GettingStarted_Before/#emergency-stop","title":"Emergency Stop","text":"<p>The emergency stop switch is located at the rear of the chassis. It can be used to immediately halt all operations in case of an emergency or if you encounter any dangerous situations.</p>"},{"location":"Guide/R1/GettingStarted_Before/#joystick-controller-instruction","title":"Joystick Controller Instruction","text":"<p>Use the provided joystick controller to operate the robot and quickly test Galaxea R1's various functions.</p> <p></p> Item Notes SWA/SWB/SWC/SWD Used to set Chassis/Torso Control Mode.Each has three positions: up/middle/down. Left Joystick Used to control the movement of the chassis and the torso. Right Joystick Used to control the rotation of the chassis and the pitch/yaw of the torso. Power Button Used to turn on/off the joystick controller."},{"location":"Guide/R1/GettingStarted_Before/#battery-installation","title":"Battery Installation","text":"<ol> <li>Open the battery compartment cover.</li> <li>Insert four fully charged AA batteries into the compartment, ensuring that the metal terminals on the batteries make contact with the metal terminals inside the compartment.</li> <li>Close the battery compartment cover.</li> </ol>"},{"location":"Guide/R1/GettingStarted_Before/#turning-on-the-controller","title":"Turning On the Controller","text":"<p>Check the system status first to ensure that the batteries are fully charged and correctly installed.  Then, press and hold both power buttons on the controller simultaneously until the screen lights up.</p>"},{"location":"Guide/R1/GettingStarted_Before/#touchscreen-operation","title":"Touchscreen Operation","text":"<p>The icon in the top left corner of the screen shows the following:</p> Item Notes TX Shows the battery level of the controller. RX Shows whether the remote control is successfully connected to Galaxea R1. If the connection is successful, it will display a half-filled bar. If the connection is unsuccessful, a question mark will appear in the box."},{"location":"Guide/R1/GettingStarted_Before/#turning-off-the-controller","title":"Turning Off the Controller","text":"<p>Press and hold both power buttons on the controller simultaneously until the screen turns off and the controller shuts down.</p>"},{"location":"Guide/R1/GettingStarted_Before/#teleoperation-guide","title":"Teleoperation Guide","text":""},{"location":"Guide/R1/GettingStarted_Before/#galaxea-r1-chassis-control","title":"Galaxea R1 Chassis Control","text":"<p>There are two ways to control and operate the chassis, using Joystick Controller or Computing Unit.</p> <p>1.Joystick Controller: - Enter Chassis Control Mode: Switch SWB to the middle position. - Left joystick: Move up/down to control the forward/backward movement of the chassis. Move left/right to control the left/right translations of the chassis. - Right joystick: Move left/right to control the rotational speed of the chassis in the yaw direction.</p> <p>2.Computing Unit: - Enter Chassis Control Mode: Switch SWB to the bottom position and switch SWC to the middle position. - Then follow the steps in the Development and Operation Tutorials to start the action.</p>"},{"location":"Guide/R1/GettingStarted_Before/#galaxea-r1-torso-control","title":"Galaxea R1 Torso Control","text":"<p>Important: Before you start, please check if there has been any zero-point drift in torso after long distance transportation. </p> <ul> <li>Connect to the Main Control Board as described in the Connecting and Installing tutorials.</li> <li>Then use the ROS interface below to check whether the current motor position is near <code>[-2.2, 2.6, 0.4, 0]</code> within +/-5%, as the pose shown in the image below.</li> </ul> <p><code>shell  rostopic echo /torso_feedback</code></p> <p></p> <p>If the position is wrong, it means that zero-point drift is observed, and please refer to the Torso Zero-Point Calibration tutorial.</p> <p>Please make sure the torso SDK is enabled first. Then we shall use the joystick controller to operate the torso of Galaxea R1. </p> <ul> <li>Enter Torso Control Mode: Switch SWB and SWC down to the bottom position.</li> <li>Left joystick: Move up/down to control the raising/lowering of the torso.</li> <li>Right joystick: Move up/down to control the positive/negative angular velocity of the torso's pitch angle. Move left/right to control the positive/negative angular velocity of the yaw angle.</li> </ul>"},{"location":"Guide/R1/GettingStarted_Before/#next-step","title":"Next Step","text":"<p>The next guide, Connecting and Installing, will explain how to connect Galaxea R1 to a computing unit and explore its functions in more detail.</p>"},{"location":"Guide/R1/GettingStarted_Connecting/","title":"Connecting and Installing","text":""},{"location":"Guide/R1/GettingStarted_Connecting/#step-1-disassembling-the-covers","title":"Step 1: Disassembling the Covers","text":"<ul> <li>Detach the front shoulder cover: Use the 3 mm hex L-key provided in the package to remove one M4 screw located on each side of the shoulder.</li> <li>Detach the rear shoulder cover: Use the 3 mm hex L-key to remove two hidden M4 screws located on each side of the shoulder.</li> </ul> <ul> <li>Detach the rear chest cover: Use the 4 mm hex L-key provided in the package to remove the two M5 screws on each side of the waist.</li> <li>Detach the front chest cover: Use the 4 mm hex L-key to remove two hidden M5 screws on each side of the waist.</li> </ul>"},{"location":"Guide/R1/GettingStarted_Connecting/#step-2-logging-and-connecting-main-control-board","title":"Step 2: Logging and Connecting Main Control Board","text":"<p>After removing the shoulder and chest covers:</p> <ul> <li>The HDMI cable is located on the right side of the chest for connecting your display device.</li> <li>The USB port is located below the chest for connecting a keyboard and mouse.</li> </ul> <p></p> <ul> <li> <p>The current 'main control board*' of R1 is industrial computer running Linux Ubuntu, with the username <code>r1</code> and the default password <code>1</code>.</p> </li> <li> <p>After connecting to Wi-Fi, you can remotely connect to the R1 via SSH using the command, with <code>192.168.xxx.xxx</code> as its IP address.</p> </li> <li> <p><code>Bash     ssh r1@192.168.xxx.xxx</code></p> </li> <li> <p>When you have finished the above procedures, disconnect the HDMI and USB cables.</p> </li> </ul> <p>'*It is configurable: Industrial Computer/ECU/etc.'</p>"},{"location":"Guide/R1/GettingStarted_Connecting/#step-3-installing-arms","title":"Step 3: Installing Arms","text":"<ul> <li>When installing the robot arm, you must ensure that the arm and the base ports are facing backward.</li> <li>Use the 5 mm hex L-key and four M6 screws to secure the arm.</li> </ul> <ul> <li>Plug the power and USB cables provide with Galaxea A1 arms to the ports on the arm base.</li> </ul>"},{"location":"Guide/R1/GettingStarted_Connecting/#step-4-reattaching-the-covers","title":"Step 4: Reattaching the Covers","text":"<p>After confirming that the communication connection with the robot arms is successful, reattach the covers by reversing the steps in Disassembling the Covers above.</p>"},{"location":"Guide/R1/GettingStarted_Connecting/#next-step","title":"Next Step","text":"<p>Our quickstart journey has come to an end. To deepen your mastery of Galaxea R1, we strongly recommend exploring the following chapters in Galaxea R1 Hardware User Guide and Software User Guide. These resources offer a wealth of additional information and practical examples, guiding you through the intricacies of programming for Galaxea R1 with confidence and ease.</p>"},{"location":"Guide/R1/Getting_Started/","title":"Getting Started","text":"<p>In this first tutorial, you will learn how to power on and operate this new product, beginning your journey of interacting with Galaxea R1.</p>"},{"location":"Guide/R1/Getting_Started/#before-you-begin","title":"Before You Begin","text":""},{"location":"Guide/R1/Getting_Started/#safety","title":"Safety","text":"<p>In this tutorial, you will learn how to power on and operate this new product, beginning your journey of interacting with Galaxea R1.</p>"},{"location":"Guide/R1/Getting_Started/#installing","title":"Installing","text":"<p>For detailed instructions on how to install each component of the Galaxea R1, please refer to the Connecting and Installing section. These tutorials provide step-by-step guidance to ensure proper assembly and setup.</p>"},{"location":"Guide/R1/Getting_Started/#turning-on","title":"Turning On","text":"<p>To turn on the Galaxea R1, please press the boat-shaped button on the side of the chassis.</p>"},{"location":"Guide/R1/Getting_Started/#shutting-down","title":"Shutting Down","text":"<p>The Galaxea R1 can be turned off by simply switching off the button on the left side of the chassis.</p>"},{"location":"Guide/R1/Getting_Started/#emergency-stop","title":"Emergency Stop","text":"<p>The emergency stop switch is located at the rear of the chassis. It can be used to immediately halt all operations in case of an emergency or if you encounter any dangerous situations.</p>"},{"location":"Guide/R1/Getting_Started/#joystick-controller","title":"Joystick Controller","text":""},{"location":"Guide/R1/Getting_Started/#instruction","title":"Instruction","text":"Item Notes SWA/SWB/SWC/SWD Used to set Chassis/Torso Control Mode.Each has three positions: up/middle/down. Left Joystick Used to control the movement of the chassis and the torso. Right Joystick Used to control the rotation of the chassis and the pitch/yaw of the torso. Power Button Used to turn on/off the joystick controller."},{"location":"Guide/R1/Getting_Started/#battery-installation","title":"Battery Installation","text":"<ol> <li>Open the battery compartment cover.</li> <li> <p>Insert four fully charged AA batteries into the compartment, ensuring that the metal terminals on the batteries make contact with the metal terminals inside the compartment.</p> </li> <li> <p>Close the battery compartment cover.</p> </li> </ol> <p></p>"},{"location":"Guide/R1/Getting_Started/#turning-on-the-controller","title":"Turning On the Controller","text":"<p>Please follow these steps to power on:</p> <ol> <li> <p>Check the system status to ensure:</p> <ul> <li>The batteries are fully charged and correctly installed.</li> <li>The Galaxea R1 is powered on and turned on, which will also power on the built-in receiver.</li> </ul> </li> <li> <p>Press and hold both power buttons on the controller simultaneously until the screen lights up.</p> </li> </ol>"},{"location":"Guide/R1/Getting_Started/#touchscreen","title":"Touchscreen","text":"<p>The icon in the top left corner of the screen shows the following:</p> Item Notes TX Shows the battery level of the controller. RX Shows whether the remote control is successfully connected to the Galaxea R1. If the connection is successful, it will display a half-filled bar. If the connection is unsuccessful, a question mark will appear in the box. <p></p> <p>Use the provided joystick controller to operate the robot and quickly test the Galaxea R1's various functions.</p>"},{"location":"Guide/R1/Getting_Started/#turning-off-the-controller","title":"Turning Off the Controller","text":"<p>Press and hold both power buttons on the controller simultaneously until the screen turns off and the controller shuts down.</p>"},{"location":"Guide/R1/Getting_Started/#teleoperation-guide","title":"Teleoperation Guide","text":""},{"location":"Guide/R1/Getting_Started/#galaxea-r1-chassis-control","title":"Galaxea R1 Chassis Control","text":"<p>There are two ways to control and operate the chassis, using Joystick Controller or Computing Unit.</p> <ol> <li>Joystick Controller\uff1a</li> </ol> <p>First, Switch SWB to the middle position to enter Chassis Control Mode.</p> <pre><code>* Left joystick: Move up and down to control the forward and backward movement of the chassis. Move left and right to control the left and right translations of the chassis.\n\n* Right joystick: Move left and right to control the rotational speed of the chassis in the yaw direction.\n</code></pre> <ol> <li> <p>Computing Unit:</p> <ul> <li>Switch SWB to the bottom position and switch SWC to the middle position to enter upper computer chassis control mode. Then follow the steps in the Development and Operation Tutorials to start the action.</li> </ul> </li> </ol>"},{"location":"Guide/R1/Getting_Started/#galaxea-r1-torso-control","title":"Galaxea R1 Torso Control","text":"<p>Important: Before you start, please check if there has been any zero-point drift in torso after long distance transportation.</p> <ul> <li> <p>First, connect to the Main Control Board as described in the Connecting and Installing tutorials..</p> </li> <li> <p>Then, use the ROS interface below to check whether the current motor position is near [-2.2, 2.6, 0.4, 0] within +/-5%, as the pose shown in the image below.</p> <ul> <li><code>Bash     rostopic echo /torso_feedback</code></li> </ul> </li> </ul> <p></p> <p>If the position is wrong, it means that zero-point drift is observed, and please refer to the Torso Zero-Point Calibration tutorial.</p> <p>Please make sure the torso SDK is enabled first. We shall use the joystick controller to operate the torso of the Galaxea R1. Switch the SWB and SWC down to enter Torso Control Mode. Use the joystick controller to control and operate the robot's torso.</p> <ol> <li>Left joystick: Move up and down to control the raising and lowering of the torso.</li> <li>Right joystick: Move up (positive) and down (negative) to control the angular velocity of the torso's pitch angle. Move left (positive) and right (negative) to control the angular velocity of the yaw angle of R1.</li> </ol>"},{"location":"Guide/R1/Getting_Started/#next-step","title":"Next Step","text":"<p>The next guide, Connecting and Installing, will explain how to connect the Galaxea R1 to computing unit to explore its functions in more detail. We recommend all new users complete the Getting Started series before beginning to develop with the robot.</p>"},{"location":"Guide/R1/Getting_Started/#connecting","title":"Connecting","text":""},{"location":"Guide/R1/Getting_Started/#step-1-disassembling-the-covers","title":"Step 1: Disassembling the Covers","text":""},{"location":"Guide/R1/Getting_Started/#remove-the-shoulder-covers","title":"Remove the Shoulder Covers","text":"<ul> <li>Use the hex L-key (3 mm) provided in the package to remove the M4 screws located on the robot's shoulders, with one screw on each side. Then, the rear shoulder cover can be detached.</li> <li>After removing the front cover, you will see two M4 screws on each side of the neck. Use the hex L-key (3 mm) to remove these screws, and then you can detach the rear shoulder cover.</li> </ul>"},{"location":"Guide/R1/Getting_Started/#remove-the-chest-covers","title":"Remove the Chest Covers","text":"<ul> <li>Use the provided hex L-key (4 mm) provided to remove the M5 screws from both sides of the chest covers, two screws on each side. Then, you can detach the rear chest cover.</li> <li>After removing the rear cover, you will see two M5 screws on each side of the robot's waist. Use the hex key (4 mm) to remove these screws, and then you can detach the front chest cover.</li> </ul>"},{"location":"Guide/R1/Getting_Started/#step-2-logging-and-connecting-main-control-board","title":"Step 2: Logging and Connecting Main Control Board","text":"<p>After removing the robot's shoulder and chest covers:</p> <ul> <li>On the right side of the chest, there is a reserved HDMI cable connector for connecting your display device.</li> <li>Below the chest, there is a reserved USB port for connecting a keyboard and mouse.</li> </ul> <p></p>"},{"location":"Guide/R1/Getting_Started/#connecting_1","title":"Connecting","text":"<ul> <li> <p>The current main control board* of R1 is industrial computer running Linux Ubuntu, with the username <code>r1</code> and the default password <code>1</code>.</p> </li> <li> <p>After connecting to Wi-Fi, you can remotely connect to the R1 via SSH using the command, with <code>192.168.xxx.xxx</code> as its IP address.</p> <ul> <li><code>Bash     ssh r1@192.168.xxx.xxx</code></li> </ul> </li> <li> <p>After logging into and configuring the main unit, disconnect the HDMI cable and the USB keyboard and mouse cables.</p> </li> </ul> <p>*It is configurable: Industrial Computer/ECU/etc.</p>"},{"location":"Guide/R1/Getting_Started/#post-configuration","title":"Post-Configuration","text":"<ul> <li>After logging into and configuring the main unit, disconnect the HDMI cable and the USB keyboard and mouse cables.</li> <li>Reinstall the robot arms on both sides and reattach the covers.</li> </ul>"},{"location":"Guide/R1/Getting_Started/#step-3-installing-arms","title":"Step 3: Installing Arms","text":""},{"location":"Guide/R1/Getting_Started/#install-the-left-and-right-arms","title":"Install the left and right arms","text":"<ul> <li>When installing the robot arm, ensure that the arm and the base ports are facing backward.</li> <li>Use the hex L-key (5 mm) and four M6 screws to secure the arm.</li> </ul>"},{"location":"Guide/R1/Getting_Started/#connect-the-cables","title":"Connect the cables","text":"<ul> <li>Connect the power and USB 2.0 cables for both robot arms. The connectors are pre-reserved; simply plug them in.</li> </ul>"},{"location":"Guide/R1/Getting_Started/#step-4-reattaching-the-covers","title":"Step 4: Reattaching the Covers","text":"<p>After verifying connection with the robot is , reattach the covers to complete the installation.</p> <p>After confirming that the communication connection with the robot arms is successful, reattach the covers by reversing the disassembly steps above to complete the installation.</p>"},{"location":"Guide/R1/Getting_Started/#next-step_1","title":"Next Step","text":"<p>Our quickstart journey has come to an end. To deepen your mastery of the Galaxea R1, we strongly recommend exploring the following chapters, particularly the Development and Operation Tutorials. These resources offer a wealth of additional information and practical examples, guiding you through the intricacies of programming for the Galaxea R1 with confidence and ease.</p>"},{"location":"Guide/R1/Hardware_Guide/","title":"Galaxea R1 Hardware Guide","text":""},{"location":"Guide/R1/Hardware_Guide/#disclaimer","title":"Disclaimer","text":"<p>Galaxea R1 is intended for research applications by users experienced in operating and programming research robots. This product is not designed for general consumer use in the home and does not have the necessary certifications for such purposes. </p>"},{"location":"Guide/R1/Hardware_Guide/#galaxea-r1-technical-specifications","title":"Galaxea R1 Technical Specifications","text":""},{"location":"Guide/R1/Hardware_Guide/#electrical-parameters","title":"Electrical Parameters","text":"Electrical Index Parameters Nominal Voltage 48 V Rated Capacity 30 Ah Power Supply Lithium-ion Battery Cooling System Low-noise Local Air Cooling Charger 600 W (Fully charged in 1.5 hours)"},{"location":"Guide/R1/Hardware_Guide/#performance-parameters","title":"Performance Parameters","text":"Machine Features Values Height 1685 mm when standing 1020 mm when folded Depth 220 mm for chest 445 mm for chassis Width 530 mm Weight 70 kg with battery Degree of Freedom 24 DOF in Total: 6 DOF for chassis, 4 DOF for torso, 14 DOF for two arms with grippers Arm Payload Rated 2 kgMaximum 5 kg Arm Reach 700 mm The arm touches the ground when folded and reaches up to 2 m when standing. Torso Movement Space Waist: Yaw \u00b1170\u00b0 Hip: Pitch \u00b170\u00b0 Knee: W1 (0\u00b0~125\u00b0), W2 (-170\u00b0~90\u00b0) (600 mm in height adjustment range) Torso Motor Torque Rated 100 NMMaximum 200 NM"},{"location":"Guide/R1/Hardware_Guide/#robot-structure","title":"Robot Structure","text":""},{"location":"Guide/R1/Hardware_Guide/#head","title":"Head","text":"<p>The ZED2 3D + DEPTH Camera is attached to the robot head. It provides high-definition 3D video and neural depth perception of the environment, with a wide field of view and an electronically synchronized rolling shutter, making it an ideal choice for applications requiring precise spatial awareness and real-time 3D mapping.</p> <p></p>"},{"location":"Guide/R1/Hardware_Guide/#arm","title":"Arm","text":"<p>Galaxea R1 features two Galaxea A1 robot arms. Each arm consists of two main links made from Acrylonitrile Butadiene Styrene (ABS), which is lightweight, rigid and durable. These links are mounted on a base inserted inside the body, and interconnected by six joints. Each joint is equipped with planetary gear motors, enabling independent variable-speed operation with high precision and torque.</p> <p>In the current version of Galaxea A1, the motor does not have a brake, so cutting off the power may cause the robotic arm to drop suddenly. We will continue to improve the product to address this issue.</p> <p></p> <p>The arm is designed to have:</p> Item Notes Length Deployed 775 mmFolded 449 mm Height Deployed 237 mmFolded 277 mm Width 128 mm"},{"location":"Guide/R1/Hardware_Guide/#base","title":"Base","text":"<p>The chassis is triangular in shape and equipped with three steering wheels. The power button is on the left side of the chassis and the emergency stop button is at the rear of the chassis.</p> <p>To charge the robot, please use the provided power cable and insert it into the 48V power supply port located at the bottom of the rear of the chassis.</p> <p></p> Item Notes Length 555 mm Height 313 mm Width 572 mm Emergency Stop Button Used for immediate power interruption during emergencies. Power Button Used to turn on/off the robot Power Supply Port Rated voltage 48 V"},{"location":"Guide/R1/Hardware_Guide/#sensors","title":"Sensors","text":"<p>Galaxea R1 includes a number of sensors that allow it to perceive the environment.</p>"},{"location":"Guide/R1/Hardware_Guide/#camera","title":"Camera","text":"<p>The ZED2 3D + DEPTH Camera is attached to the robot head. By combining AI and 3D techniques, this camera can detect and track objects with spactial context. An all-aluminum enclosure with thermal control makes it robust and compensates for focal length and motion sensors biases.</p> <p></p> Specification Parameters Output Resolution 2 x (2208 x 1242) @15 fps 2 x (1920 x 1080) @30 fps 2 x (1280 x 720) @60 fps 2 x (672 x 376) @100 fps Field of View Max. 110\u00b0(H) x 70\u00b0(V) x 120\u00b0(D) Depth Range 0.3 m to 20 m Depth Accuracy &lt; 1% up to 3 m &lt; 5% up to 15 m Dimension 174.9 x 29.8 x 31.9 mm Weight 164 g"},{"location":"Guide/R1/Hardware_Guide/#computing-unit","title":"Computing Unit","text":"Units &amp; Sensors Notes Basic Computating Capability 14 Core 3.8GHz CPU Deep Learning Computing Capability 3070 16GB Video Memory Memory 64GB Hard Disk 1TB SSD Camera Dual RGB (optional dual RGBD) Joint Encoder Dual Encoder Others WiFi, Bluetooth, HDMI"},{"location":"Guide/R1/Hardware_Guide/#next-step","title":"Next Step","text":"<p>This concludes the hardware guide for Galaxea R1. For further details, please refer to Galaxea R1 Software Guide.</p>"},{"location":"Guide/R1/Software_Guide/","title":"Software Dependency","text":"<ol> <li>Ubuntu 20.04 LTS</li> <li>ROS Noetic</li> </ol>"},{"location":"Guide/R1/Software_Guide/#installation","title":"Installation","text":"<p>This SDK does not require recompilation. Please refer to the Developing and Operating Tutorials for direct usage instructions.</p>"},{"location":"Guide/R1/Software_Guide/#first-move","title":"First Move","text":""},{"location":"Guide/R1/Software_Guide/#chassis-spins-in-place","title":"Chassis - Spins in place","text":"<pre><code>#Switch SWB to the bottom position and switch SWC to the middle position to enter upper computer chassis control mode.\nrostopic pub /cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.1\" \n\n  ### Send This Command to make R1 Spin with Controller \n\n\n  ###Two Way to make it stop\n  rostopic pub /cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.0\" \n\n  ### Change SWB / SWC to quit Upper Computer Control mode of chassis\n</code></pre>"},{"location":"Guide/R1/Software_Guide/#torso-squat-stand","title":"Torso - Squat &amp; Stand","text":"<p>Controller teleoperation actually is making /controller topic message mapping to another topic /target_torso_speed by a python script.   (/controller topic is sent by chassis control unit to control unit by CAN.) So the torso is actually controlled by /target_toorso_speed.</p> <p>First step, make controller quit Torso Control Mode (SWB &amp; SWC not at bottom),  making /controller not published.</p> <p>Second step, using this command below to move the torso.</p> <pre><code>##############\nrostopic pub /target_torso_speed geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0   \n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.1\n  z: 0.0\"\n\n  ###linear.y &gt; 0 means raise the torso \n  ###linear.y &lt; 0 means down the torso\n  ###angular.x &gt; 0 means increase the pitch and &lt;0 means decrease the pitch\n  ###angular.y &gt; 0 means anti-clockwise the wrist and &lt; 0 means clockwise the wrist\n</code></pre> <p>Third step, using this command below to stop the torso.</p> <pre><code>##############\nrostopic pub /target_torso_speed geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0   \n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.0\"\n\n  ###linear.y &gt; 0 means raise the torso \n  ###linear.y &lt; 0 means down the torso\n  ###angular.x &gt; 0 means increase the pitch and &lt;0 means decrease the pitch\n  ###angular.y &gt; 0 means anti-clockwise the wrist and &lt; 0 means clockwise the wrist\n</code></pre>"},{"location":"Guide/R1/Software_Guide/#arm-wave-salute","title":"Arm - Wave &amp; Salute","text":"<ul> <li>Arm's control is complicate and cannot be controller only with two joy stick. Therefore, we put a preset trajectory stored in Galaxea R1's Control Unit in the form of rosbag.</li> <li> <p>Before we make Galaxea R1 move its arms, it should be ensured as the pose below, especially for the joint 4, 5&amp; 6 joints of both arms. Since the arm is frozen once it is on, we can shut it down and change the arm pose manually.</p> </li> <li> <p>Using the command below, we can make the arm wave first and salute next.</p> </li> </ul> <pre><code>rosbag play ~/Downloads/test_wave_salute.bag\n</code></pre>"},{"location":"Guide/R1/Software_Guide/#software-interface","title":"Software Interface","text":"<p>The interface section describes the various control and status feedback interfaces for Galaxea R1, to help users better understand how to communicate and control the arm through the ROS package.</p>"},{"location":"Guide/R1/Software_Guide/#driver-interface","title":"Driver Interface","text":"<p>The current Galaxea R1 driver is mainly composed of three parts, including four independent Rosnodes, which are the drive of the chassis, the drive of both arms (left arm and right arm), and the drive of the torso. The interfaces provided by the three drivers are in the form of  ROS topic, and are described as follows.</p>"},{"location":"Guide/R1/Software_Guide/#chassis-driver-interface","title":"Chassis Driver Interface","text":"<p>This interface is used for chassis status feedback ROS package. The package defines multiple topics for posting the status of multiple motors in the chassis. The following are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /hdas/motor_state Chassis motion status feedback chassis_msg/DrivetrainStamped Topic Name Field Description /hdas/motor_state header Standard ROS header .steering_angle_fl Front wheel left wheel steering angle degrees .steering_angle_fr Front wheel right wheel steering angle degrees .steering_angle_rl Rear wheel left wheel steering angle degrees .steering_angle_rr Rear wheel right wheel steering angle degrees .drive_speed_fl Front wheel left wheel linear speed m/s .drive_speed_fr Front wheel right wheel linear speed m/s .drive_speed_rl Rear wheel left wheel linear speed m/s .drive_speed_rr Rear wheel right wheel linear speed m/s .drive_angular_speed_fl Front wheel left wheel angular speed rad/s .drive_angular_speed_fr Front wheel right wheel angular speed rad/s .drive_angular_speed_rl Rear wheel left wheel angular speed rad/s .drive_angular_speed_rr Rear wheel right wheel angular speed rad/s .motion_mode N/A mode Control mode /gripper_joint_command header Standard header gripper_force Gripper force"},{"location":"Guide/R1/Software_Guide/#arms-driver-interface","title":"Arms Driver Interface","text":"<p>The interface is a ROS package for robotic arm control and status feedback. This package defines several topics for posting and subscribing to the status of the robot arm, control commands, and associated error code information. Below are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /left_arm/joint_states/right_arm/joint_states Robotic arm joint status feedback sensor_msgs/JointState /left_arm/arm_status/right_arm/arm_status Robotic arm motor status feedback signal_arm/status_stamped /left_arm/arm_joint_command/right_arm/arm_joint_command Robotic arm control interface signal_arm/arm_control /left_arm/gripper_joint_command/right_arm/gripper_joint_command Gripper force control interface signal_arm/gripper_joint_command Topic Name Field Description /left_arm/joint_states/right_arm/joint_states Header Standard header name Name of each arm joint position Position of each arm joint velocity Velocity of each arm joint /left_arm/arm_status/right_arm/arm_status header Standard header status.name Name of each status status.motor_errors Errors of each status /left_arm/arm_joint_command/right_arm/arm_joint_command header Standard header p_des Position command of robot arm v_des Velocity command of robot arm t_ff Torque command of robot arm kp Proportion coefficient of position kd Differential coefficient of position /left_arm/gripper_joint_command/right_arm/gripper_joint_command header Standard header gripper_force Gripper force"},{"location":"Guide/R1/Software_Guide/#diagnostic-trouble-code","title":"Diagnostic Trouble Code","text":"<p>DTC is used to feedback the error information of the MCU and the drive, and can be used to view the real-time status of each motor and the running status of the drive. The following is a detailed description of each fault code and its corresponding status.</p> DTC Status 0 Disabled 1 Disabled 2 Motor Disconnected 3 Position Jump 4 Continuous High Current 5 Excessive Torque 6 ECU -&gt; ACU Timeout 7 Position Limit Exceeded 8 Speed Limit Exceeded 9 Torque Limit Exceeded 10 Overpressure 11 Low pressure 12 Overcurrent 13 MOS Overtemperature 14 Motor Winding Overtemperature 15 Communication loss 16 Overload 17 Serial Connection Disconnected (No Device File) 18 Device File Connected, No Messages 19 Serial Read/Write Failure 20 Feedback Reception Overflow"},{"location":"Guide/R1/Software_Guide/#torso-driver-interface","title":"Torso Driver Interface","text":"<p>This interface is used for the ROS package for torso control and status feedback. The package defines several topics for publishing and subscribing to information about the status of torso motors, and control commands. The following is a detailed description of each topic and its associated message types:</p> Topic Name Description Message Type /torso_feedback Torso motor joint status feedback sensor_msgs/JointState /torso_control Torso motor status feedback signal_arm/arm_control Topic Name Field Description /torso_feedback Header Standard header name Name of each torso joint position Position of each torso joint velocity Velocity of each torso joint effort N/A /torso_control header Standard header p_des Position command of torso v_des Velocity command of torso t_ff N/A kp N/A kd N/A"},{"location":"Guide/R1/Software_Guide/#operation-control-interface","title":"Operation Control Interface","text":"<p>The current Galaxea R1 operation control interface mainly consists of three parts, which are the chassis operation control interface, the two arms operation control interface (left and right arm) and the torso's O&amp;C interface. Among them, each drive has different motion interface exposure. All interfaces are exposed in the form of  ROS topic and made available to the user. All interface information is as follows.</p>"},{"location":"Guide/R1/Software_Guide/#chassis-control-interface","title":"Chassis Control Interface","text":"<p>This part is divided into the operation and control interface provided by Galaxea R1 chassis. The interface is exposed to the outside in the form of  ROS topic, which is used to specify the chassis to agree at the expected speed. The speed includes the superposition of X,Y and Yaw Rate.</p> Topic Name Description Message Type /cmd_vel Chassis control signal sent geometry_msgs/Twist Topic Name Field Description /cmd_vel header Standard ROS header linear Control of linear speed .x Linear speed of x, range (-1 to 1) m/s .y Linear speed of y, range (-1 to 1) m/s angular Control of yaw rate .z Control of angular speed, -1 to 1 rad/s"},{"location":"Guide/R1/Software_Guide/#arms-control-interface","title":"Arms Control Interface","text":"<p>This part is divided into R1 arms operation control interface, in the form of  ROS topic exposure interface.</p>"},{"location":"Guide/R1/Software_Guide/#joint-position-movement-interface","title":"Joint Position Movement Interface","text":"<p>joint_move is a ROS package for single-joint control of robotic arms. This package is used to specify the movement of each joint from the current position to the specified position, the maximum speed and maximum acceleration during the movement can be specified, if not specified, the default speed and acceleration will be planned. The default maximum speed is 20 rad/s, and the maximum acceleration is 20 rad/s\u00b2. The topics and fields of the motion interface are shown in the following table.</p> Topic Name Description Message Type /left_arm/arm_joint_target_position/right_arm/arm_joint_target_position Target positions of each robotic arm joint Sensor_msgs/JointState Topic Name Field Description /left_arm/arm_joint_target_position/right_arm/arm_joint_target_position Header Standard header name Name of each arm joint position Position of each arm joint velocity Velocity of each arm joint effort Torque of each arm joints"},{"location":"Guide/R1/Software_Guide/#end-pose-movement-interface","title":"End Pose Movement Interface","text":"<p>eef_move is a ROS package for robotic arm end control. This package is used to specify the end of the robot arm to reach the specified position with the specified attitude, and its interface is shown below. Note: If the given position and attitude are unreachable by the robot arm, the robot arm will be as close to the target pose as possible through the optimization function. When the objective function is set, the weight of the position gap is twice the weight of the attitude gap).</p> Topic Name Description Message Type /left_arm/arm_target_pose/right_arm/arm_target_pose Target positions of each robotic arm end joint Geometry_msgs::PoseStamped Topic Name Field Description /left_arm/arm_target_pose/right_arm/arm_target_pose header Standard header pose.position.x Shift in the X direction pose.position.y Shift in the Y direction pose.position.z Shift in the Z direction pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide/#end-trajactory-movement-interface","title":"End Trajactory Movement interface","text":"<p>eef_follow is a ROS package for robotic arm end control. This package is used to specify the end of the manipulator to follow the specified trajectory to the specified position, and its interface is shown below. Note: If the given position and attitude are unreachable by the robot arm, the robot arm will be as close to the target pose as possible through the optimization function. When the objective function is set, the weight of the position gap is twice the weight of the attitude gap).</p> Topic Name Description Message Type /left_arm/arm_target_trajectory/right_arm/arm_target_trajectory Target track of robotic arm end joint Geometry_msgs::PoseArray Topic Name Field Description /left_arm/arm_target_trajectory/right_arm/arm_target_trajectory header Standard header posesgeometry_msgs/Pose[] Description of pose in the BaseLink coordinate system, where each pose has a fixed time interval of 0.1s. pose.position.x Shift in the X direction pose.position.y Shift in the Y direction pose.position.z Shift in the Z direction pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide/#torso-control-interface","title":"Torso Control Interface","text":"<p>This part is divided into the operation control interface of the torso part, which exposes the interface to the outside in the form of  ROS topic. The coordinate system is defined as follows: RGB three colors against XYZ, and the definition of the end of the torso is the coordinate axis shown in the figure.</p> <p></p>"},{"location":"Guide/R1/Software_Guide/#torso-speed-control-interface","title":"Torso Speed Control Interface","text":"<p>torso_control is a ROS package for torso end control, which is used to specify the torso end to move at a specified speed.</p> Topic Name Description Message Type /target_torso_speed Torso control signal sent geometry_msgs/Twist Topic Name Field Description /cmd_vel header Standard ROS header linear control of linear speed .z linear_speed of z, range (-0.2 to 0.2) m/s angular control of yaw rate .x control of angular speed in pitch direction, -0.5 - 0.5 rad/s .y control of angular speed in pitch direction, -0.5 - 0.5 rad/s"},{"location":"Guide/R1/Software_Guide/#torso-pose-control-interface","title":"Torso Pose Control Interface","text":"<p>torso_control is a ROS package for torso end control, which is used to specify when the torso reaches a specified height and the corresponding pitch and yaw.</p> <p>This position is subject to certain constraints, which are described in the interface below</p> Topic Name Description Message Type /torso_target_pose Target pose of end arm joint Geometry_msgs::PoseStamped Topic Name Field Description /torso_target_pose header Standard Header pose.position.x Shift in x-direction in the range of (0,0.25) pose.position.z Shift in z-direction in the range of (0,1) pose.orientation The constraint of -Pitch satisfies sin(pitch) (-x/0.32, (0.25-x)/0.32). The constraint of -Yaw is satisfied with (-3.05-3.05) pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide/#torso-re-calibration","title":"Torso Re-calibration","text":""},{"location":"Guide/R1/Software_Guide/#disable-the-auto-start-torso-tontrol-interface","title":"Disable the Auto-start Torso Tontrol Interface","text":"<ul> <li> <p>Before performing zero-point calibration, please first disable the auto-start torso control algorithm.</p> </li> <li> <p><code>Bash     ps aux | grep torso_control      ### Find the Torso Control Node PID First     kill -9 (PID)     ### PID is the found PID</code></p> </li> </ul>"},{"location":"Guide/R1/Software_Guide/#adjust-single-joint-position-control-interface","title":"Adjust Single-joint Position Control Interface","text":"<p>Please proceed with caution during the adjustment and ensure that the delta position of each joint is less than 10 degrees each time. Adjust each Torso joint one at a time, and support the Galaxea R1 during the adjustment to prevent any potential tipping.</p> <pre><code>rostopic echo /torso_feedback \n## Find Current Torso Feedback Position First, p1, p2, p3, p4 for the current degree\nsource ${SDK_PATH}/install/setup.bash\nrostopic pub /torso_control signal_arm/arm_control \"header:\n  seq: 0\n  stamp: {secs: 0, nsecs: 0}\n  frame_id: ''\np_des: [${p1+delta_p1}, ${p2+delta_p2}, ${p3+delta_p3}, ${p4+delta_p4}]\nv_des: [0.1, 0.1, 0.1, 0.1]\nkp: [0]\nkd: [0]\nt_ff: [0]\nmode: 0\"\n\n### delta_pi is the delta degree wanna each joint to move.\n### delta_p1 &gt; 0 -&gt; T1 Moves Forward \n### delta_p2 &gt; 0 -&gt; T2 Moves Forward \n### delta_p3 &gt; 0 -&gt; T3 Moves Backward \n### delta_p4 &gt; 0 -&gt; T4 Moves anticlockwise \n</code></pre>"},{"location":"Guide/R1/Software_Guide/#rosservice-call","title":"Rosservice Call","text":"<p>Importance: Keep your hands on the robot for support.</p> <p>Once near the zero-point, you can use the following interface for calibration. The zero-point posture is as shown. When issuing commands, the motor brakes will briefly release, so please support the robot to prevent calibration errors.</p> <p></p> <pre><code>rosservice call /torso_node/function_frame \"0x03\"\n</code></pre>"},{"location":"Guide/R1/Software_Guide/#repower-the-system","title":"Repower the System","text":"<p>Repower the system and check if it is at zero.</p> <pre><code>rostopic echo /torso_feedback \n### Check Current Torso Feedback Position Check whether calibration succeed \n</code></pre>"},{"location":"Guide/R1/Software_Guide_Interface/","title":"Software Interface","text":"<p>In this chapter, we describe the various control and status feedback interfaces for Galaxea R1, to help users better understand how to communicate and control the arm through the ROS package.</p>"},{"location":"Guide/R1/Software_Guide_Interface/#driver-interface","title":"Driver Interface","text":"<p>The current Galaxea R1 driver is mainly composed of three parts, including four independent Ros nodes: the drivers of the chassis, the left and right arms, and the torso. The interfaces provided by these drivers are in the form of ROS topics, as described below.</p>"},{"location":"Guide/R1/Software_Guide_Interface/#chassis-driver-interface","title":"Chassis Driver Interface","text":"<p>This interface is used for the chassis status feedback ROS package. The package defines multiple topics for posting the status of multiple motors in the chassis. The following are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /hdas/motor_state Chassis motion status feedback chassis_msg/DrivetrainStamped Topic Name Field Description /hdas/motor_state header Standard ROS header .steering_angle_fl Front wheel left wheel steering angle degrees .steering_angle_fr Front wheel right wheel steering angle degrees .steering_angle_rl Rear wheel left wheel steering angle degrees .steering_angle_rr Rear wheel right wheel steering angle degrees .drive_speed_fl Front wheel left wheel linear speed m/s .drive_speed_fr Front wheel right wheel linear speed m/s .drive_speed_rl Rear wheel left wheel linear speed m/s .drive_speed_rr Rear wheel right wheel linear speed m/s .drive_angular_speed_fl Front wheel left wheel angular speed rad/s .drive_angular_speed_fr Front wheel right wheel angular speed rad/s .drive_angular_speed_rl Rear wheel left wheel angular speed rad/s .drive_angular_speed_rr Rear wheel right wheel angular speed rad/s .motion_mode N/A mode Control mode /gripper_joint_command header Standard header gripper_force Gripper force"},{"location":"Guide/R1/Software_Guide_Interface/#arms-driver-interface","title":"Arms Driver Interface","text":"<p>This interface is used for arm control and status feedback ROS package. The package defines multiple topics for publishing and subscribing to the status of the robot arm, control commands, and associated error code information. The following are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /left_arm/joint_states/right_arm/joint_states Arm joint status feedback sensor_msgs/JointState /left_arm/arm_status/right_arm/arm_status Arm motor status feedback signal_arm/status_stamped /left_arm/arm_joint_command/right_arm/arm_joint_command Arm control interface signal_arm/arm_control /left_arm/gripper_joint_command/right_arm/gripper_joint_command Gripper force control interface signal_arm/gripper_joint_command Topic Name Field Description /left_arm/joint_states/right_arm/joint_states Header Standard header name Name of each arm joint position Position of each arm joint velocity Velocity of each arm joint /left_arm/arm_status/right_arm/arm_status header Standard header status.name Name of each status status.motor_errors Errors of each status /left_arm/arm_joint_command/right_arm/arm_joint_command header Standard header p_des Position command of the arm v_des Velocity command of the arm t_ff Torque command of the arm kp Proportion coefficient of position kd Differential coefficient of position /left_arm/gripper_joint_command/right_arm/gripper_joint_command header Standard header gripper_force Gripper force"},{"location":"Guide/R1/Software_Guide_Interface/#diagnostic-trouble-code","title":"Diagnostic Trouble Code","text":"<p>DTC is used to feedback the error information of the MCU and the driver, and can be used to view the real-time status of each motor and the running status of the driver. The following is a detailed description of each fault code and its corresponding status.</p> DTC Status 0 Disabled 1 Disabled 2 Motor Disconnected 3 Position Jump 4 Continuous High Current 5 Excessive Torque 6 ECU -&gt; ACU Timeout 7 Position Limit Exceeded 8 Speed Limit Exceeded 9 Torque Limit Exceeded 10 Overpressure 11 Low pressure 12 Overcurrent 13 MOS Overtemperature 14 Motor Winding Overtemperature 15 Communication loss 16 Overload 17 Serial Connection Disconnected (No Device File) 18 Device File Connected, No Messages 19 Serial Read/Write Failure 20 Feedback Reception Overflow"},{"location":"Guide/R1/Software_Guide_Interface/#torso-driver-interface","title":"Torso Driver Interface","text":"<p>This interface is used for torso control and status feedback ROS package. The package defines multiple  topics for publishing and subscribing to the status of torso motors and control commands. The following are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /torso_feedback Joint status feedback of the torso motor sensor_msgs/JointState /torso_control Torso motor status feedback signal_arm/arm_control Topic Name Field Description /torso_feedback Header Standard header name Name of each torso joint position Position of each torso joint velocity Velocity of each torso joint effort N/A /torso_control header Standard header p_des Position command of torso v_des Velocity command of torso t_ff N/A kp N/A kd N/A"},{"location":"Guide/R1/Software_Guide_Interface/#operation-control-interface","title":"Operation Control Interface","text":"<p>The current Galaxea R1 operation and control interface is mainly composed of three parts: the chassis, the left and right arms, and the torso. Each drive has different motion interface exposure. The interfaces provided by these drivers are in the form of ROS topics as described below and available to users.</p>"},{"location":"Guide/R1/Software_Guide_Interface/#chassis-control-interface","title":"Chassis Control Interface","text":"<p>The chassis control interface can be used to command the chassis to move at the target speed, which includes the combination of X, Y, and Yaw Rate:</p> Topic Name Description Message Type /cmd_vel Issuing the chassis control signal  geometry_msgs/Twist Topic Name Field Description /cmd_vel header Standard ROS header linear Control of linear speed .x Linear speed of x, range (-1 to 1) m/s .y Linear speed of y, range (-1 to 1) m/s angular Control of yaw rate .z Control of angular speed, -1 to 1 rad/s"},{"location":"Guide/R1/Software_Guide_Interface/#arms-control-interface","title":"Arms Control Interface","text":""},{"location":"Guide/R1/Software_Guide_Interface/#joint-position-movement-interface","title":"Joint Position Movement Interface","text":"<p><code>joint_move</code> is a ROS package for the single-joint control of robot arms and is used to move each joint from the current position to the target position. The maximum speed and maximum acceleration can be specified; if not, the default maximum speed, 20 rad/s, and the default maximum acceleration, 20 rad/s\u00b2, will be used for planning.  The following are detailed descriptions of each topic and its related message types:</p> Topic Name Description Message Type /left_arm/arm_joint_target_position/right_arm/arm_joint_target_position Target position and pose of each arm joint Sensor_msgs/JointState Topic Name Field Description /left_arm/arm_joint_target_position/right_arm/arm_joint_target_position Header Standard header name Name of each arm joint position Position of each arm joint velocity Velocity of each arm joint effort Torque of each arm joints"},{"location":"Guide/R1/Software_Guide_Interface/#end-pose-movement-interface","title":"End Pose Movement Interface","text":"<p><code>eef_move</code>is a ROS package for the end control of robot arms and is used to move the end of the robot arm to the target position with the target pose. </p> <p>Note: If the given position and pose are unreachable, the robot arm will be as close to the target position and pose as possible through the optimization function. When setting the targets, the weight of the position gap is twice the weight of the pose gap.</p> Topic Name Description Message Type /left_arm/arm_target_pose/right_arm/arm_target_pose Target positions of each robotic arm end joint Geometry_msgs::PoseStamped Topic Name Field Description /left_arm/arm_target_pose/right_arm/arm_target_pose header Standard header pose.position.x Shift in the X direction pose.position.y Shift in the Y direction pose.position.z Shift in the Z direction pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide_Interface/#end-trajectory-movement-interface","title":"End Trajectory Movement interface","text":"<p><code>eef_follow</code> is a ROS package for the end control of robot arms and is used to move the end following the target trajectory to the target position.</p> <p>Note: If the given position and pose are unreachable, the robot arm will be as close to the target position and pose as possible through the optimization function. When setting the targets, the weight of the position gap is twice the weight of the pose gap.</p> Topic Name Description Message Type /left_arm/arm_target_trajectory/right_arm/arm_target_trajectory Target trajectory of the end of arms Geometry_msgs::PoseArray Topic Name Field Description /left_arm/arm_target_trajectory/right_arm/arm_target_trajectory header Standard header posesgeometry_msgs/Pose[] Description of pose in the BaseLink coordinate system, where each pose has a fixed time interval of 0.1s. pose.position.x Shift in the X direction pose.position.y Shift in the Y direction pose.position.z Shift in the Z direction pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide_Interface/#torso-control-interface","title":"Torso Control Interface","text":"<p>The coordinate system is defined as follows: - The coordinate axes represent the end of the torso. - The red, green, and blue lines represent the X, Y, and Z axes, respectively.</p> <p></p>"},{"location":"Guide/R1/Software_Guide_Interface/#torso-speed-control-interface","title":"Torso Speed Control Interface","text":"<p><code>torso_control</code> is a ROS package for the end control of the torso and is used to move the end of the torso at a target speed.</p> Topic Name Description Message Type /target_torso_speed Issuing the torso control signal geometry_msgs/Twist Topic Name Field Description /cmd_vel header Standard ROS header linear control of linear speed .z linear_speed of z, range (-0.2 to 0.2) m/s angular control of yaw rate .x control of angular speed in pitch direction, -0.5 - 0.5 rad/s .y control of angular speed in pitch direction, -0.5 - 0.5 rad/s"},{"location":"Guide/R1/Software_Guide_Interface/#torso-pose-control-interface","title":"Torso Pose Control Interface","text":"<p><code>torso_control</code> is a ROS package for the end control of the torso and is used to move the pose of the torso to the target height and to the corresponding pitch and yaw. This pose is subject to certain constraints, as described below.</p> Topic Name Description Message Type /torso_target_pose Target pose of end arm joint Geometry_msgs::PoseStamped Topic Name Field Description /torso_target_pose header Standard Header pose.position.x Shift in x-direction in the range of (0,0.25) pose.position.z Shift in z-direction in the range of (0,1) pose.orientation The constraint of -Pitch satisfies sin(pitch) (-x/0.32, (0.25-x)/0.32). The constraint of -Yaw is satisfied with (-3.05-3.05) pose.orientation.x Orientation quaternion pose.orientation.y Orientation quaternion pose.orientation.z Orientation quaternion pose.orientation.w Orientation quaternion"},{"location":"Guide/R1/Software_Guide_Interface/#torso-re-calibration","title":"Torso Re-calibration","text":""},{"location":"Guide/R1/Software_Guide_Interface/#disable-the-auto-start-torso-control-interface","title":"Disable the Auto-start Torso Control Interface","text":"<p>Before performing zero-point calibration, please first disable the auto-start torso control algorithm.</p> <ul> <li><code>Bash     ps aux | grep torso_control      ### Find the Torso Control Node PID First     kill -9 (PID)     ### PID is the found PID</code></li> </ul>"},{"location":"Guide/R1/Software_Guide_Interface/#adjust-single-joint-position-control-interface","title":"Adjust Single-joint Position Control Interface","text":"<p>Please proceed with caution during the adjustment and ensure that the delta position of each joint is less than 10 degrees each time. Adjust each Torso joint one at a time, and hold the robot during the adjustment to prevent any potential tipping.</p> <pre><code>rostopic echo /torso_feedback \n## Find Current Torso Feedback Position First, p1, p2, p3, p4 for the current degree\nsource ${SDK_PATH}/install/setup.bash\nrostopic pub /torso_control signal_arm/arm_control \"header:\n  seq: 0\n  stamp: {secs: 0, nsecs: 0}\n  frame_id: ''\np_des: [${p1+delta_p1}, ${p2+delta_p2}, ${p3+delta_p3}, ${p4+delta_p4}]\nv_des: [0.1, 0.1, 0.1, 0.1]\nkp: [0]\nkd: [0]\nt_ff: [0]\nmode: 0\"\n\n### delta_pi is the delta degree wanna each joint to move.\n### delta_p1 &gt; 0 -&gt; T1 Moves Forward \n### delta_p2 &gt; 0 -&gt; T2 Moves Forward \n### delta_p3 &gt; 0 -&gt; T3 Moves Backward \n### delta_p4 &gt; 0 -&gt; T4 Moves anticlockwise \n</code></pre>"},{"location":"Guide/R1/Software_Guide_Interface/#rosservice-call","title":"Rosservice Call","text":"<p>Importance: Hold the robot by hand.</p> <p>Once near the zero-point, you can use the following interface for calibration. The zero-point posture is as shown. When issuing commands, the motor brakes will briefly release, so please hold the robot to prevent calibration errors.</p> <p></p> <pre><code>rosservice call /torso_node/function_frame \"0x03\"\n</code></pre> <ul> <li>Repower the system and check if it is at zero.</li> </ul> <pre><code>rostopic echo /torso_feedback \n### Check Current Torso Feedback Position Check whether calibration succeed \n</code></pre>"},{"location":"Guide/R1/Software_Guide_firstmove/","title":"Software Overview","text":""},{"location":"Guide/R1/Software_Guide_firstmove/#software-dependency","title":"Software Dependency","text":"<ol> <li>Ubuntu 20.04 LTS</li> <li>ROS Noetic</li> </ol>"},{"location":"Guide/R1/Software_Guide_firstmove/#installation","title":"Installation","text":"<p>This SDK does not require recompilation. Please refer to the contents below.</p>"},{"location":"Guide/R1/Software_Guide_firstmove/#first-move","title":"First Move","text":""},{"location":"Guide/R1/Software_Guide_firstmove/#chassis-spins-in-place","title":"Chassis - Spins in place","text":"<pre><code>#Switch SWB to the bottom position and switch SWC to the middle position to enter upper computer chassis control mode.\nrostopic pub /cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.1\" \n\n  ### Send This Command to make R1 Spin with Controller \n\n\n  ###Two Way to make it stop\n  rostopic pub /cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.0\" \n\n  ### Change SWB / SWC to quit Upper Computer Control mode of chassis\n</code></pre>"},{"location":"Guide/R1/Software_Guide_firstmove/#torso-squat-stand","title":"Torso - Squat &amp; Stand","text":"<p>Controller teleoperation primarily involves using a Python script to map messages from the topic <code>/controller</code> to the topic <code>/target_torso_speed</code>. (<code>/controller</code> is sent by Chassis Control Unit to Control Unit via CAN.) Therefore, the torso is actually controlled by the topic <code>/target_torso_speed</code>. </p> <p>Please follow the following commands:</p> <ol> <li>Quit Torso Control Mode: Switch SWB and SWC to positions other than the bottom to ensure that the topic <code>/controller</code> is NOT published.</li> <li>Move the torso:</li> </ol> <pre><code>##############\nrostopic pub /target_torso_speed geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0   \n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.1\n  z: 0.0\"\n\n  ###linear.y &gt; 0 means raise the torso \n  ###linear.y &lt; 0 means down the torso\n  ###angular.x &gt; 0 means increase the pitch and &lt;0 means decrease the pitch\n  ###angular.y &gt; 0 means anti-clockwise the wrist and &lt; 0 means clockwise the wrist\n</code></pre> <ol> <li>Stop the torso:</li> </ol> <pre><code>##############\nrostopic pub /target_torso_speed geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0   \n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.0\"\n\n  ###linear.y &gt; 0 means raise the torso \n  ###linear.y &lt; 0 means down the torso\n  ###angular.x &gt; 0 means increase the pitch and &lt;0 means decrease the pitch\n  ###angular.y &gt; 0 means anti-clockwise the wrist and &lt; 0 means clockwise the wrist\n</code></pre>"},{"location":"Guide/R1/Software_Guide_firstmove/#arm-wave-salute","title":"Arm - Wave &amp; Salute","text":"<p>Since the arm control is complex and cannot be managed with just two joysticks, we have stored a preset trajectory in the Galaxea R1's Control Unit in the format of rosbag.</p> <p>Before operating arms, ensure that the pose is as shown below, especially for joints 4, 5, and 6 of both arms. Since the arm remains stationary when powered on, you can turn it off to manually adjust the arm's pose.</p> <p></p> <p>Use the command below to first make the arm wave and then perform a salute.</p> <pre><code>rosbag play ~/Downloads/test_wave_salute.bag\n</code></pre>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/","title":"Getting Started","text":"<p>In this first tutorial, you will learn how to power on and operate this new product, beginning your journey of interacting with Galaxea R1.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#before-you-begin","title":"Before You Begin","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#safety","title":"Safety","text":"<p>Galaxea R1 has the potential to cause harm if not properly used. We recommend that all users review the Safety Guide before operating the robot.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#unboxing","title":"Unboxing","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#installing","title":"Installing","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#turning-on","title":"Turning On","text":"<p>To turn on Galaxea R1, press the boat-shaped switch on the side of the chassis. Pressing the switch will distribute 48V DC power to the various modules of the R1, completing the startup.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#charging","title":"Charging","text":"<p>Galaxea R1 is powered by two 12V AGM SLA batteries that provide a combined 18AH of capacity and provides a charging interface. Before starting, ensure that all packing materials have been removed from the robot and that the area around the robot is clear of furniture or obstacles.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#shutting-down","title":"Shutting Down","text":"<p>Galaxea R1 can be turned off by simply switching off the button on the side of the chassis. The motors in the R1 arms have brakes, so the arms will stay in place when power is cut.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#emergency-stop","title":"Emergency Stop","text":"<p>The emergency stop switch is located at the rear of the chassis. It can be used to immediately halt all operations in case of an emergency or if you encounter any dangerous situations.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#joystick-controller","title":"Joystick Controller","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#instruction","title":"Instruction","text":"Item Notes SWA/SWB/SWC/SWD Used to set Chassis/Torso Control Mode.Each has three positions: up/middle/down. Left Joystick Used to control the movement of the chassis and the torso. Right Joystick Used to control the rotation of the chassis and the pitch/yaw of the torso. Power Button Used to turn on/off the joystick controller."},{"location":"Guide/R1/assets/R1%20Getting%20Started/#battery-installation","title":"Battery Installation","text":"<ol> <li>Open the battery compartment cover.</li> <li> <p>Insert four fully charged AA batteries into the compartment, ensuring that the metal terminals on the batteries make contact with the metal terminals inside the compartment.</p> </li> <li> <p>Close the battery compartment cover.</p> </li> </ol> <p></p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#turning-on-the-controller","title":"Turning On the Controller","text":"<p>Please follow these steps to power on:</p> <ol> <li>Check the system status to ensure:</li> <li>The batteries are fully charged and correctly installed.</li> <li> <p>Galaxea R1 is powered on and turned on, which will also power on the built-in receiver.</p> </li> <li> <p>Press and hold both power buttons on the controller simultaneously until the screen lights up.</p> </li> </ol>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#touchscreen","title":"Touchscreen","text":"<p>The icon in the top left corner of the screen shows the following:</p> Item Notes TX Shows the battery level of the controller. RX Shows whether the remote control is successfully connected to R1. If the connection is successful, it will display a half-filled bar. If the connection is unsuccessful, a question mark will appear in the box. <p></p> <p>Use the provided joystick controller to operate the robot and quickly test R1 Robot's various functions.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#turning-off-the-controller","title":"Turning Off the Controller","text":"<p>Press and hold both power buttons on the controller simultaneously until the screen turns off and the controller shuts down.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#teleoperation-guide","title":"Teleoperation Guide","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#galaxea-r1-chassis-control","title":"Galaxea R1 Chassis Control","text":"<p>Add a video </p> <p>There are two ways to control and operate the chassis, using Joystick Controller or upper computer.</p> <ol> <li>Joystick Controller\uff1a</li> </ol> <p>First, Switch SWB to the middle position to enter Chassis Control Mode.</p> <ul> <li> <p>Left joystick: Move up and down to control the forward and backward movement of the chassis. Move left and right to control the left and right translations of the chassis.</p> </li> <li> <p>Right joystick: Move left and right to control the rotational speed of the chassis in the yaw direction.</p> </li> <li> <p>Upper Computer:</p> </li> <li>Switch SWB to the bottom position and switch SWC to the middle position to enter upper computer chassis control mode. Then follow the steps in the Development and Operation Tutorials to start the action.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#galaxea-r1-torso-control","title":"Galaxea R1 Torso Control","text":"<p>Important: Upon first startup, please check if there has been any zero-point drift in torso during long distance transportation. </p> <ul> <li>First, connect to the Main Control Board as described in the Connecting and Installing tutorials.. </li> <li> <p>Then, use the ROS interface below to check whether the current motor position is near [-2.2, 2.6, 0.4, 0] within +/-5%, as R1's pose shown in the image below. </p> </li> <li> <p><code>Bash     rostopic echo /torso_feedback</code></p> </li> </ul> <p></p> <p>If the position is wrong, it means that zero-point drift is observed, and please refer to the Torso Zero-Point Calibration tutorial to perform calibration for the torso motors, and then proceed with using the controller.</p> <p>Use the joystick controller to control and operate the robot's torso. First, ensure that the torso SDK is enabled before proceeding. Then, switch SWB and SWC to the bottom position to enter Torso Control Mode.</p> <ol> <li>Left joystick: Move up and down to control the raising and lowering of the torso. </li> <li>Right joystick: Move up (positive) and down (negative) to control the angular velocity of the torso's pitch angle. Move left (positive) and right (negative) to control the angular velocity of the yaw angle of R1.</li> </ol>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#next-step","title":"Next Step","text":"<p>The next guide, Connecting, will explain how to connect Galaxea R1 to upper computer to explore its functions in more detail. We recommend all new users complete the Getting Started series before beginning to develop with the robot.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#connecting","title":"Connecting","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#step-1-disassembling-the-covers","title":"Step 1: Disassembling the Covers","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#remove-the-shoulder-covers","title":"Remove the Shoulder Covers","text":"<ul> <li>Use the hex L-key (3 mm) provided in the package to remove the M4 screws located on the robot's shoulders, with one screw on each side. Then, the rear shoulder cover can be detached.</li> <li>After removing the front cover, you will see two M4 screws on each side of the neck. Use the hex L-key (3 mm) to remove these screws, and then you can detach the rear shoulder cover.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#remove-the-chest-covers","title":"Remove the Chest Covers","text":"<ul> <li>Use the provided hex key (4 mm) provided to remove the M5 screws from both sides of the chest covers, two screws on each side. Then, you can detach the rear chest cover.</li> <li>After removing the rear cover, you will see two M5 screws on each side of the robot's waist. Use the hex key (4 mm) to remove these screws, and then you can detach the front chest cover.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#step-2-logging-and-connecting-main-control-board","title":"Step 2: Logging and Connecting Main Control Board","text":"<p>After removing the robot's shoulder and chest covers:</p> <ul> <li>On the right side of the robot\u2019s arm, there is a reserved HDMI cable connector for connecting your display.</li> <li>Below the robot\u2019s chest cavity, there is a reserved USB port for connecting a keyboard and mouse.</li> </ul> <p></p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#connecting_1","title":"Connecting","text":"<ul> <li> <p>The current main control board of R1 is an industrial computer running Linux Ubuntu, with the username <code>r1</code> and the default password <code>1</code>.</p> </li> <li> <p>After connecting to Wi-Fi, you can remotely connect to the R1 via SSH using the command, with <code>192.168.xxx.xxx</code> as its IP address.</p> </li> <li> <p><code>Bash     ssh r1@192.168.xxx.xxx</code></p> </li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#post-configuration","title":"Post-Configuration","text":"<ul> <li>After logging into and configuring the main unit, disconnect the HDMI cable and the USB keyboard and mouse cables.</li> <li>Reinstall the robot arms on both sides and reattach the covers.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#step-3-installing-arms","title":"Step 3: Installing Arms","text":""},{"location":"Guide/R1/assets/R1%20Getting%20Started/#install-the-left-and-right-arms","title":"Install the left and right arms","text":"<ul> <li>When installing the robot arm, ensure that the arm and the base ports are facing backward.</li> <li>Use the hex L-key (5 mm) and four M6 screws to secure the arm.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#connect-the-cables","title":"Connect the cables","text":"<ul> <li>Connect the power and USB 2.0 cables for both robot arms. The connectors are pre-reserved; simply plug them in.</li> </ul>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#step-4-reattaching-the-covers","title":"Step 4: Reattaching the Covers","text":"<p>After verifying connection with the robot is , reattach the covers to complete the installation.</p> <p>After confirming that the communication connection with the robot arms is successful, reattach the covers by reversing the disassembly steps above to complete the installation.</p>"},{"location":"Guide/R1/assets/R1%20Getting%20Started/#next-step_1","title":"Next Step","text":"<p>Our quickstart journey has come to an end. To deepen your mastery of Galaxea R1, we strongly recommend exploring the following chapters, particularly the Development and Operation Tutorials. These resources offer a wealth of additional information and practical examples, guiding you through the intricacies of programming for Galaxea R1 with confidence and ease.</p>"},{"location":"Introducing_Galaxea_Robot/introduction/","title":"Galaxea Robot","text":""},{"location":"Introducing_Galaxea_Robot/introduction/#ultra-light-highly-dynamic","title":"Ultra-Light &amp; Highly Dynamic","text":"<p>A1 is an Ultra-Light Force-Controlled robot arm,  distinguished by its exceptional dynamism and significant high payload capacity.  This cutting-edge technology makes it an optimal choice for sophisticated applications that require nuanced interactions,  thanks to its outstanding electrical performance, robust handling capabilities, and versatile jointed structure.</p> <p>The arm's superior high-speed operation, paired with its precise force control,  enables unparalleled performance in a multitude of tasks, from delicate assembly operations to demanding research experiments.  Its articulate design ensures adaptability across a broad range of motions,  making it a versatile tool for industries seeking automation with finesse.</p>"},{"location":"Introducing_Galaxea_Robot/introduction/#key-features","title":"Key Features","text":""},{"location":"Introducing_Galaxea_Robot/introduction/#discover-more","title":"Discover More","text":"<p>If you wish to learn more about the hardware and software specifics of A1 robotic arm,  please refer to the Galaxea  A1 Guide for detailed information.</p> <p>The manual will provide you with comprehensive insights into the technical specifications,  operational guidelines, and system requirements that will help you understand and utilize A1 to its fullest potential.</p>"},{"location":"Introducing_Galaxea_Robot/product_info/A1/","title":"Galaxea Robot","text":""},{"location":"Introducing_Galaxea_Robot/product_info/A1/#high-dynamics-large-payload","title":"High Dynamics &amp; Large Payload","text":"<p>Galaxea A1 is a lightweight force-controlled robot arm known for its exceptional dynamism and significant high payload capacity. This cutting-edge technology makes it the optimal choice for sophisticated applications that demand nuanced interactions, owing to its outstanding electrical performance, robust handling capabilities, and versatile jointed structure.</p> <p>It's superior high-speed operation, combined with precise force control, enables unparalleled performance across a variety of tasks, from delicate assembly operations to demanding research experiments. Its articulate design ensures adaptability across a broad range of motions, making it a versatile tool for industries seeking automation with finesse. </p>"},{"location":"Introducing_Galaxea_Robot/product_info/A1/#key-hardware-features","title":"Key Hardware Features","text":""},{"location":"Introducing_Galaxea_Robot/product_info/A1/#advanced-accessories","title":"Advanced Accessories","text":"<p>Discover the superior performance and innovative features of our accessories designed to optimize your Galaxea A1's capabilities.</p> Galaxea G1 Inspire-Robots RH56 Series Dexterous Hand"},{"location":"Introducing_Galaxea_Robot/product_info/A1/#ready-for-ai-development","title":"Ready for AI Development","text":"<p>Use case</p>"},{"location":"Introducing_Galaxea_Robot/product_info/A1/#discover-more","title":"Discover More","text":"<p>If you wish to learn more about the hardware and software specifics of Galaxea A1, please refer to the Galaxea A1 User Guide for detailed information.</p> <p>The manual will provide you with comprehensive insights into the technical specifications, operational guidelines, and system requirements that will help you understand and utilize Galaxea A1 to its fullest potential.</p>"},{"location":"Introducing_Galaxea_Robot/product_info/A1_accessory_G1/","title":"Galaxea G1","text":""},{"location":"Introducing_Galaxea_Robot/product_info/A1_accessory_G1/#advanced-performance-versatility","title":"Advanced Performance &amp; Versatility","text":"<p>Our high-precision Galaxea G1 is designed for robust and versatile gripping solutions, making it ideal for various industrial applications. With its advanced mechanics and reliable performance, this gripper ensures secure handling and adaptability in diverse environments.</p> <ul> <li>High Gripping Force</li> <li>Linear Movement</li> </ul> <p> </p>"},{"location":"Introducing_Galaxea_Robot/product_info/A1_accessory_G1/#comparison-with-others","title":"Comparison with Others","text":""},{"location":"Introducing_Galaxea_Robot/product_info/Dexterous_hand/","title":"Comming Soon","text":""},{"location":"Introducing_Galaxea_Robot/product_info/R1/","title":"R1","text":""},{"location":"Introducing_Galaxea_Robot/product_info/R1/#product-infromation","title":"Product Infromation","text":"<p> R1 is a full-size two-arm humanoid robot.  It has an operating radius of 80cm, and an operating space of 2m above the ground.  R1 is equipped with Galaxea AI self-developed dual-arm light weight high-dynamic manipulator A1,  a 4DoF torso which can lift/pitch/yaw and a triple-drive triple-rotation vector chassis to support mobile operation needs in various scenarios.</p>"},{"location":"Introducing_Galaxea_Robot/product_info/R1/#omni-directional-moving","title":"Omni-directional moving","text":"Your browser does not support the video tag."},{"location":"Introducing_Galaxea_Robot/product_info/R1/#vector-controlled-chassis","title":"Vector-controlled chassis","text":"Your browser does not support the video tag."},{"location":"Introducing_Galaxea_Robot/product_info/R1/#technical-specification","title":"Technical Specification","text":""},{"location":"Introducing_Galaxea_Robot/product_info/R1/#our-solutions","title":"Our Solutions","text":""},{"location":"Introducing_Galaxea_Robot/product_info/X1/","title":"X1","text":""},{"location":"Introducing_Galaxea_Robot/product_info/X1/#product-infromation","title":"Product Infromation","text":"<p> X1 is an omni-directional mobility vector control chassis.  It is ideal for complex applications with embodied intelligence with its excellent high load capacity and flexible articulated design.  Its superior high-speed operation ensures guaranteed excellence in research environments.</p>"},{"location":"Introducing_Galaxea_Robot/product_info/X1/#omni-directional-moving","title":"Omni-directional moving","text":"Your browser does not support the video tag."},{"location":"Introducing_Galaxea_Robot/product_info/X1/#vector-controlled-chassis","title":"Vector-controlled chassis","text":"Your browser does not support the video tag."},{"location":"Introducing_Galaxea_Robot/product_info/X1/#technical-specification","title":"Technical Specification","text":""},{"location":"Introducing_Galaxea_Robot/product_info/X1/#our-solutions","title":"Our Solutions","text":""},{"location":"about_us/about_us/","title":"About us","text":"<p>Galaxea AI is an artificial intelligence company that focuses on building \"One Brain, Multiple Types\" of embodied intelligent robots.  We have completed the full-stack self-research from the body ontology, end-to-end algorithm, scene landing and solution.  The core team not only gathers world-class scientists in embodied intelligence perception and operation algorithms,  but also possesses rich cutting-edge technology product landing ability and valuable experience in mass production of autonomous driving.  Galaxea AI's vision is to create a new quality of robot productivity in the era of artificial intelligence.</p>"}]}